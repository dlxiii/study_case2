
% Which version of FVCOM are we using (for the forcing file formats)?
inputConf.FVCOM_version = '4.1';

% Location of grads file
inputConf.grid = [basedir,'/study_case2/gis_files/opmeshes/',...
    'dem_00_03_enhancement.14'];

%%%------------------------------------------------------------------------
%%%                           Spatial stuff
%%%                           ????????????
%%%------------------------------------------------------------------------

% Case name for the model inputs and outputs
% Change this to whatever you want
inputConf.casename = 'tokyobay';

% output coordinates (FVCOM only likes cartesian at the moment)
inputConf.coordType = 'cartesian'; % 'spherical' or 'cartesian' 
% input coordinates (what's my input bathy in?)
inputConf.coordInput = 'spherical'; % 'spherical' or 'cartesian'

% Input grid UTM Zone (if applicable)
% See: https://upload.wikimedia.org/wikipedia/commons/e/ed/Utm-zones.jpg
% As Utm-zones indicated, here should be 54-S, but here the utmZone should
% be tmzone (UTM longitudinal zone) and utmhemi (UTM hemisphere as array of
% 'N' or 'S' characters)
inputConf.utmZone = {'54 N'};

% Option to smooth the bathymetry data.
inputConf.smoothBathy = 'yes'; % 'yes' or 'no'.
if strcmpi(inputConf.smoothBathy, 'yes')
    % Set the smoothing factor and number of iterations (see smoothmesh).
    inputConf.smoothFactors = [0.5, 4]; % [factor, iterations]
end

% vertical coordinates type: sigma or hybrid
inputConf.verticalCoordType = 'sigma';


%%%------------------------------------------------------------------------
%%%                     Time and Model constants
%%%                     ?????????????????????????????????
%%%------------------------------------------------------------------------

% Model time ([Y,M,D,h,m,s])
inputConf.modelYear = 2014;
inputConf.startDate = [inputConf.modelYear,01,01,00,00,00];
inputConf.endDate = [inputConf.modelYear+2,01,01,00,00,00];

% Convert times to Modified Julian Date
inputConf.startDateMJD = greg2mjulian(inputConf.startDate(1),...
    inputConf.startDate(2),inputConf.startDate(3),inputConf.startDate(4),...
    inputConf.startDate(5),inputConf.startDate(6));
inputConf.endDateMJD = greg2mjulian(inputConf.endDate(1),...
    inputConf.endDate(2),inputConf.endDate(3),inputConf.endDate(4),...
    inputConf.endDate(5),inputConf.endDate(6));

% The number of months in the period of data.
inputConf.mm = inputConf.startDate(2):inputConf.endDate(2);
if inputConf.mm == 1
    inputConf.dOffsets = [0, 4];
elseif inputConf.mm == 12
    inputConf.dOffsets = [2, 0];
else
    inputConf.dOffsets = [2, 4];
end

% Sponge layer parameters
inputConf.spongeRadius = -1; % in metres, or -1 for variable
inputConf.spongeCoeff = 0.001;

% z0 value in metres
inputConf.bedRoughness = 0.015; % or 0.015, 0.025 or 0.03 - Davies and Furnes (1980) shelf model

% Estimated velocity (m/s) and tidal range (m) for time step estimate
inputConf.estVel = 1.5;
inputConf.estRange = 2.0;


%%%------------------------------------------------------------------------
%%%                       Forcing and stuff
%%%                       ?????????????????????
%%%------------------------------------------------------------------------

% Model time type ('non-julian' and 'julian')
inputConf.datetype = 'julian';
% Increment used for tide (days)
inputConf.datetide = 1/24;
% Model time is decided depend on the datetype.
if strcmpi(inputConf.datetype,'non-julian') 
    inputConf.modelTime = [...
        inputConf.startDateMJD, ...
        inputConf.endDateMJD];
elseif strcmpi(inputConf.datetype,'julian')
    inputConf.modelTime = [...
        inputConf.startDateMJD - inputConf.dOffsets(1), ...
        inputConf.endDateMJD + inputConf.dOffsets(2)];
end
% Open boundary forcing nodal forcing type (drived by OTPS).
inputConf.obcForcing = 'z'; 
inputConf.tidesMJD = inputConf.startDateMJD:inputConf.datetide:inputConf.endDateMJD;

% Increment used for open boundary ST (days)
inputConf.dateobs = 1/24;
% Open boundary temperatures and salinities (string for source or number for constant).
% The data is avaliable from 1992-10-02 00:00:00
inputConf.obc_temp = 'HYCOM';
inputConf.obc_salt = 'HYCOM';
inputConf.obc_u = 'NONE';
inputConf.obc_v = 'NONE';
inputConf.obctsMJD = [inputConf.startDateMJD, inputConf.endDateMJD + 1];
if strcmpi('HYCOM', {inputConf.obc_u, inputConf.obc_v})
  inputConf.Nested_type = 1;% [1, 2 == direct nesting, 3 == weighted]
  inputConf.levels = 1;% number of boundary bands to use for weighted option
  inputConf.power = 0;% [0 is linear, anything else is 1/conf.levels.^conf.power]
end

% Increment used for surface forcing (days)
inputConf.dateforcing = 1/24;
% The surface forcing from NCEP
% The data is avaliable from 1948 - present
inputConf.doForcing = 'GWO';
if strcmpi(inputConf.doForcing, 'GWO')
    inputConf.forceMJD = inputConf.startDateMJD:inputConf.dateforcing:inputConf.endDateMJD;
elseif strcmpi(inputConf.doForcing, 'NCEP')
    inputConf.forceMJD = [inputConf.startDateMJD, inputConf.endDateMJD];
end

% The river forcing from flux, salinity and temperature
inputConf.riverForcing = 'FLUX';
% % River information
% inputConf.river.infos = {...
%     'Edogawa',...
%     'Nakagawa',...
%     'Arakawa',...
%     'Sumidagawa',...
%     'Tamagawa',...
%     'Tsurumigawa',...
%     'Ebigawa'};
% % Location of river file
% inputConf.river.flux = [basedir,'river/data_q/river_flux.csv'];
% inputConf.river.temp = [basedir,'river/data_q/river_temp.csv'];
% inputConf.river.salt = [basedir,'river/data_q/river_salt.csv'];
% inputConf.river.location = [basedir,'river/data_q/river_location.csv'];

% River information
inputConf.river.infos = {...
    'Edogawa',...
    'Nakagawa',...
    'Arakawa',...
    'Sumidagawa',...
    'Tamagawa',...
    'Tsurumigawa'};
% Location of river file
inputConf.river.flux = ['river_flux.csv'];
inputConf.river.temp = ['river_temp.csv'];
inputConf.river.salt = ['river_salt.csv'];
inputConf.river.location = ['location.csv'];

% Adjust river mouth location
% 139??55'57.84"	139??50'55.07"	139??46'29.73"	139??46'46.94"	139??40'53.63"	139??58'41.66"
%  35??41'56.29"	 35??38'36.31"	 35??38'49.41"	 35??31'45.11"	 35??28'25.39"	 35??40'52.25"
% New Edogawa river mouth location
% 139.872575 (139??52'21.27")
% 35.63695833(35??38'13.05")

% Give some names to the boundaries. This must match the number of node
% strings defined in SMS. Ideally, the order of the names should match the
% order in which the boundaries were made in SMS.
inputConf.boundaryNames = {'pacific_ocean'};


% Stations
inputConf.names = {...
    'Tokyo',...
    'Chiba',...
    'Yokohamashinko',...
    'Daini-Kaiho',...
    'Yokosuka',...
    'Kyurihamako',...
%     'Tidal-Station-1',...
%     'Tidal-Station-2',...
%     'Tidal-Station-3',...
%     'Tidal-Station-4',...
    };
inputConf.positions = [...
    139.7700000000000,35.648888888888889;...
    140.0455555555556,35.568055555555556;...
    139.6441666666666,35.454166666666667;...
    139.7433333333333,35.308611111111105;...
    139.6513888888889,35.288055555555556;...
    139.7208333333333,35.227777777777778;...
%     139.6912777777778,35.062205555555556;...
%     139.7207861111112,35.076750000000004;...
%     139.7504166666667,35.093661111111111;...
%     139.7735055555556,35.127727777777778;...
    ];

% Make cross section courses
% 'Yoko_01': Tokyo-Chiba port;
% 'Yoko_02': Submarine high way
% 'Yoko_03': Inner bay boundary
% 'Yoko_04': Outer bay boundary
inputConf.crosssection = {...
    'Yoko_01',...
    'Yoko_02',...
    'Yoko_03',...
    'Yoko_04',...
    'Tate_01',...
    'Tate_02',...
    'Tate_03',...
    };
inputConf.endpoints = [...
    139.8977,35.6166,140.0374,35.5166;...
    139.8023,35.5112,139.9115,35.4378;...
    139.7373,35.2656,139.7849,35.3121;...
    139.6784,35.1397,139.7529,34.9784;...
    140.0433,35.6303,139.7209,35.3020;...
    139.7209,35.3020,139.7965,35.2395;...
    139.7965,35.2395,139.7095,35.0545;...
    ];
inputConf.crosssection_ds = 0.01;

[inputConf] = getCrossSectionPoints(inputConf);

% Generate coordinates
UTMzone = regexpi(inputConf.utmZone,'\ ','split');
for s = 1:length(inputConf.positions)
    [inputConf.positions(s,3),inputConf.positions(s,4),~,~] = wgs2utm(...
        inputConf.positions(s,2),inputConf.positions(s,1),...
        str2double(char(UTMzone{1}(1))),char(UTMzone{1}(2)));
end
clear s UTMzone

% The accepted distance error of cal and real, in the cartesian coordinate 
% system, the dist unit is meter.
inputConf.dist = 1100.00;

%%
%%%------------------------------------------------------------------------
%%%                      Model mesh generation
%%%                      ????????????
%%%------------------------------------------------------------------------

% Read the input mesh and bathymetry. Also creates the data necessary for
% the Coriolis correction in FVCOM.
Mobj = read_grid_mesh(...
    'grid',inputConf.grid,...
    'coordinate',inputConf.coordType,...
    'in_coord',inputConf.coordInput,...
    'project',true,...
    'zone',inputConf.utmZone,...
    'addCoriolis',true);
forward projecting to get (x,y)

% Smooth the bathymetry if desired.
if strcmpi(inputConf.smoothBathy, 'yes')
    Mobj = setup_metrics(Mobj);
    % Backup Mobj.h as Mobj.h_backup
    Mobj.h_backup_1 = Mobj.h;
    Mobj.h = smoothfield(Mobj.h, Mobj, ...
        inputConf.smoothFactors(1), inputConf.smoothFactors(2));
    Mobj.h_backup_2 = Mobj.h;
    Mobj.h = smoothfield(Mobj.h, Mobj, ...
        inputConf.smoothFactors(1), inputConf.smoothFactors(2));
    % smoothfield2 is really inappropriate for bathymetry data.
    % Mobj.h = smoothfield2(Mobj.h,Mobj,inputconf.smoothFactors(2));
    Mobj.h_delta = Mobj.h - Mobj.h_backup_1;
    plotMesh(01, [Mobj.lon, Mobj.lat], Mobj.tri, Mobj.h_delta);
end

% % Parse the open boundary nodes and add accordingly
% % Add the sponge nodes
% x_adj = Mobj.x;
% y_adj = Mobj.y;
% for i=1:size(Mobj.read_obc_nodes,2)
%     % For each of the open boundaries, find the points inside the
%     % boundary and move the closest existing point to that location.
%     % This should make the boundaries more orthogonal (as suggested by
%     % the FVCOM manual in Figure 6.2 on page 77 [as of 2013-03-11]).
%     % x= x3;
%     % y= y3;
%     % node_ids=Mobj.read_obc_nodes{1};
%     [x_adj, y_adj] = fix_inside_boundary(x_adj, y_adj, Mobj.read_obc_nodes{i});    
% end
% Mobj.x = x_adj;
% Mobj.y = y_adj;

% Parse the open boundary nodes and add accordingly
% Add the sponge nodes
for i=1:size(Mobj.read_obc_nodes,2)
    nodeList = double(cell2mat(Mobj.read_obc_nodes(i)));
    Mobj = add_obc_nodes_list(Mobj,nodeList,inputConf.boundaryNames{i},1,1);
    if inputConf.spongeRadius < 0    % if we want a variable sponge radius
        if i==1
            % Create an array to store the radii
            Mobj.sponge_rad = zeros(size(Mobj.sponge_nodes));
        end
        % calculate the sponge radius
        spongeRadius = calc_sponge_radius(Mobj,nodeList);
        % Add the sponge nodes to the list
        Mobj = add_sponge_nodes_list(Mobj,nodeList,...
            [inputConf.boundaryNames{i},' sponge'],spongeRadius,...
            inputConf.spongeCoeff);
    else
        Mobj = add_sponge_nodes_list(Mobj,nodeList,...
            [inputConf.boundaryNames{i},' sponge'],inputConf.spongeRadius,...
            inputConf.spongeCoeff);
    end
    clear nodeList spongeRadius
end
clear i

% Model time is decided depend on the datetype.
if strcmpi(inputConf.verticalCoordType,'sigma')
    % Get the sigma depths in order to interpolate from the depths
    if exist(fullfile(inputConf.outbase, [inputConf.casename,'_sigma.dat']),'file')
        % If the sigma.dat file exists, read it
        Mobj = read_sigma(Mobj, fullfile(inputConf.outbase, [inputConf.casename,'_sigma.dat']));
    else
        % If we can't find the sigma.dat file, print an error message and finish
        error(['sigma.dat not found. Please put your sigma.dat file into ',...
            fullfile(inputConf.outbase),' and try again.'])
    end
elseif strcmpi(inputConf.verticalCoordType,'hybrid')
    inputConf.hybrid.sigma_file = [inputConf.casename,'_hybrid.dat'];
    inputConf.hybrid.nlev = 11;                % number of vertical levels (layers + 1)
    inputConf.hybrid.H0 = 100;                 % transition depth of the hybrid coordinates
    inputConf.hybrid.KU = 2;                   % number of layers in the DU water column
    inputConf.hybrid.KL = 1;                   % number of layers in the DL water column
    inputConf.hybrid.DU = 20;                  % upper water boundary thickness (metres)
    inputConf.hybrid.DL = 10;                  % lower water boundary thickness (metres)
    Mobj = hybrid_coordinate(inputConf.hybrid, Mobj);
end

% Do the bed roughness
Mobj.z0 = ones(1,Mobj.nElems)*inputConf.bedRoughness;

% Generate center point coordination of elements
% Do the stations list
Mobj.xc = nodes2elems(Mobj.x, Mobj);
Mobj.yc = nodes2elems(Mobj.y, Mobj);
Mobj.lonc = nodes2elems(Mobj.lon, Mobj);
Mobj.latc = nodes2elems(Mobj.lat, Mobj);

% Add station
% Positions=inputConf.positions;Names=inputConf.names;Dist=inputConf.dist;plotFig=1;
Mobj = add_stations_list(Mobj,inputConf.positions,inputConf.names,inputConf.dist,1);

% Estimate model time step. Supply estimated velocity (m/s) and tidal range
% (m) after the mesh object.
Mobj = estimate_ts(Mobj,inputConf.estVel,inputConf.estRange);
fprintf('Estimated time step:\t%.2f\n',min(Mobj.ts));
Estimated time step:	11.42

%%
%%%------------------------------------------------------------------------
%%%                     Output of basic configurations
%%%                     ????????????
%%%------------------------------------------------------------------------

% Grid
write_FVCOM_grid(Mobj,fullfile(inputConf.outbase,[inputConf.casename,'_grd.dat']));
write_SMS_2dm(fullfile(inputConf.outbase,[inputConf.casename,'_grd.2dm']), Mobj.tri, Mobj.x, Mobj.y, Mobj.h);
% Bathymetry
write_FVCOM_bath(Mobj,fullfile(inputConf.outbase,[inputConf.casename,'_dep.dat']));
% Coriolis
write_FVCOM_cor(Mobj,fullfile(inputConf.outbase,[inputConf.casename,'_cor.dat']));
% Open boundaries
write_FVCOM_obc(Mobj,fullfile(inputConf.outbase,[inputConf.casename,'_obc.dat']))
% Sponge file
write_FVCOM_sponge(Mobj,fullfile(inputConf.outbase,[inputConf.casename,'_spg.dat']))
% Bed roughness (constant or variable (see above))
write_FVCOM_z0(Mobj.z0,fullfile(inputConf.outbase,[inputConf.casename,'_z0.nc']),'bottom roughness');
% Time series wave stations
write_FVCOM_stations(Mobj,fullfile(inputConf.outbase,[inputConf.casename,'_station.dat']));

% Save Model object file
if exist([inputConf.outbase,'varb'], 'dir')~=7
    mkdir([inputConf.outbase,'varb'])
end
save([inputConf.outbase,'varb/Mobj_00.mat'],'Mobj','-v7.3','-nocompression');

%%
%%%------------------------------------------------------------------------
%%%                    Additional forcing: Tides
%%%                    ??????????????? 
%%%------------------------------------------------------------------------
tic
% Open boundary nodal forcing type
%   'z' for predicted surface elevation
%   'phase-amp' for amplitudes and phases
%   'model-output' for Tidal Model Driver output
fprintf('Calculating open boundary forcing data from OTPS...\n')
Calculating open boundary forcing data from OTPS...
% Need to cd to TPXO directory or it doesn't work
inputConf.extractType = 'z'; 
% (Yes, this is inelegant but it's the easiest way for now)
here = pwd; % store the current working directory to return later
tpxo_dir = which('TMD');    % find the TPXO directory
tpxo_dir = tpxo_dir(1:end-5);   % remove TPXO.m
if strcmpi(inputConf.obcForcing, 'z')
    cd(tpxo_dir)    % go to TPXO directory
    % Location of the TMD model description file
    inputConf.Model = [tpxo_dir,'DATA/Model_OhS'];
elseif strcmpi(inputConf.obcForcing, 'phase-amp')
    cd(tpxo_dir)    % go to TPXO directory
    % Location of the TMD model description file
    inputConf.Model = [tpxo_dir,'DATA/Model_OhS'];
elseif strcmpi(inputConf.obcForcing, 'otps')
    fid=fopen([tpxo_dir,'LAT_LON/lat_lon_1st'],'w');
    fprintf('Rewriting %s...\n','lat_lon_1st');
    fprintf(fid,"   lat       lon             yy   mm   dd   hh   mi  sec  dt(min) TSLength\n");
    for i = 1:Mobj.nObcNodes
        fprintf(fid," %10.4f %10.4f %8d %4d %4d %4d %4d %4d %4d %10d\n",...
            Mobj.lat(i), Mobj.lon(i),...
            inputConf.startDate(1), inputConf.startDate(2),...
            inputConf.startDate(3), inputConf.startDate(4),...
            inputConf.startDate(5), inputConf.startDate(6),...
            inputConf.datetide*24*60, 1/inputConf.datetide*(inputConf.endDateMJD-inputConf.startDateMJD)+1);
    end
    fclose(fid);
    fprintf('Finishing rewriting %s...\n','lat_lon_1st');
end

% How many tidal constituents do we actually want to use at the model
% boundaries? Case sensitive (M2 != m2).
% Only relevant if using TPXO.
inputConf.tidalComponents = {'M2','S2','N2','K2','K1','O1','P1','Q1'};
% clear tpxo_dir

%%%------------------------------------------------------------------------
%%%                  Tides and its (non)julian output
%%%------------------------------------------------------------------------

% Generate a surface elevation time series for open boundary forcing.
if strcmpi(inputConf.obcForcing, 'z')
    if develop_mode == 3
        cd(here);
    	fprintf('Loading Model objet file...\n');
        load([inputConf.outbase,'varb/Mobj_01.mat']);
        fprintf('Done!\n');
    else
        % Use tmd_tide_pred to predict surface elevations for a given time range.
        % Add the tidal components to the Mobj.
        % Mobj.Components = conf.obc_tides.components;
        Mobj.Components = inputConf.tidalComponents;
        % Get the indices to use the tidal constituents defined in
        % conf.obc_tides.components for TPXO (which requires a
        % numerical array of the constituents to be used). The order of the
        % TPXO constituents is M2, S2, N2, K2, K1, O1, P1, Q1, MF, MM, M4,
        % MS4, MN4.
        tpxoConsts = {'M2', 'S2', 'N2', 'K2', 'K1', 'O1', 'P1', 'Q1'};
        tIndUse = nan(length(Mobj.Components), 1);
        tInd = 1:length(tpxoConsts);
        for i=1:length(Mobj.Components)
            tPos = tInd(strcmp(Mobj.Components{i}, tpxoConsts));
            if ~isempty(tPos)
                tIndUse(i) = tPos;
            else
                warning('Supplied constituent (%s) is not present in the TPXO data', Mobj.Components{i}); %#ok<WNTAG>
            end
        end
        % Tidy up a bit
        clear i c tpxoConsts tPos tInd
        tIndUse = tIndUse(~isnan(tIndUse));
        % We can't just use tmd_tide_pred to do all the surface elevations
        % at once. Instead, the useful approaches are:
        %   1. Time series at a single location
        %   2. Map of a given time step at all locations
        surfaceElevation = nan(Mobj.nObcNodes, size(inputConf.tidesMJD, 2), length(inputConf.boundaryNames));
        for i=1:length(inputConf.boundaryNames)
            for j=1:Mobj.nObcNodes
                % Get the current location (from the node ID)
                currLon = Mobj.lon(Mobj.obc_nodes(i,j));
                currLat = Mobj.lat(Mobj.obc_nodes(i,j));
                %if ftbverbose
                    fprintf('Position %i of %i (%.3f %.3f)... \n', j, Mobj.nObcNodes, currLon, currLat);
                %end
                [surfaceElevation(j,:,i), ~] = tmd_tide_pred(inputConf.Model, ...
                    inputConf.tidesMJD+678942.000000, currLat, currLon, 'z', tIndUse);
                if isnan(surfaceElevation(j,:))
                    % Try the global model instead.
                    [surfaceElevation(j,:,i), ~] = tmd_tide_pred(inputConf.Model, ...
                    inputConf.tidesMJD, currLat, currLon, 'z', tIndUse);
                end
            end
        end
        Mobj.surfaceElevation = surfaceElevation;
        % Tidy up some more
        clear i j tIndUse obc_lat obc_lon currLon currLat surfaceElevation
        cd(here);
        save([inputConf.outbase,'varb/Mobj_01.mat'],'Mobj','-v7.3','-nocompression');
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % TEST CODE
        % t.Model = '/home/usr0/n70110d/github/fvcomtoolbox/tmd/DATA/Model_OhS'
        % t.SDtime = [datenum([2019,05,14,15,00,00]):1/24/60*5:datenum([2019,05,14,15,00,00])+1]
        % t.lat = 35.5681
        % t.lon = 140.0456
        % t.ptype = 'z'
        % t.Cid = 
        % [t.TS,t.conList]=tmd_tide_pred(t.Model,t.SDtime,t.lat,t.lon,t.ptype)
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    end
elseif strcmpi(inputConf.obcForcing, 'otps')
    if develop_mode == 3
    	fprintf('Loading Model objet file...\n');
        load([inputConf.outbase,'varb/Mobj_01.mat']);
        fprintf('Done!\n');
    else
        surfaceElevation = nan(Mobj.nObcNodes, size(inputConf.tidesMJD, 2), length(inputConf.boundaryNames));
        for i=1:length(inputConf.boundaryNames)
            for j=1:Mobj.nObcNodes
                % Get variables from the generated mat format files
                filename = [tpxo_dir,'OUT/1st_',mat2str(j),'.mat'];
                fprintf('Getting %s from TMD\n',['1st_',mat2str(j),'.mat']);
                variable = {'SerialDay','TimeSeries'};
                load(filename,variable{:});
                [~,n] = find(SerialDay - 678942 == inputConf.tidesMJD(1));
                for k=1:length(inputConf.tidesMJD)
                    surfaceElevation(j,k,i) = TimeSeries(1,n+k-1);
                end
            end
        end
        Mobj.surfaceElevation = surfaceElevation;
        % Tidy up some more
        clear i j k m n filename variable TimeSeries SerialDay surfaceElevation
        save([inputConf.outbase,'varb/Mobj_01.mat'],'Mobj','-v7.3','-nocompression');
    end
elseif strcmpi(inputConf.obcForcing,'phase-amp')
    if develop_mode == 3
        cd(here);
    	fprintf('Loading Model objet file...\n');
        load([inputConf.outbase,'varb/Mobj_01.mat']);
        fprintf('Done!\n');
    else
        % Boundary conditions from TPXO (for spectral tides or predicted
        % surface elevations)
        % Put the input list into the mesh object.
        Mobj.Components = inputConf.tidalComponents;
        % Set up the tidal struct. This contains the relevant information for up to
        % eight constituents, ordered as period, beta love number and equilibrium
        % amplitude.
        %                    period    beta    eq. amp.
        %                      (s)      (?)       (m)
        tideComponents.M2 = [44714.16, 0.693, 0.242334];
        tideComponents.S2 = [43200.00, 0.693, 0.112841];
        tideComponents.N2 = [45570.24, 0.693, 0.046398];
        tideComponents.K2 = [43082.28, 0.693, 0.030704];
        tideComponents.K1 = [86163.84, 0.736, 0.141565];
        tideComponents.O1 = [92949.84, 0.695, 0.100514];
        tideComponents.P1 = [86637.24, 0.706, 0.046843];
        tideComponents.Q1 = [96726.24, 0.695, 0.019256];
        %tideComponents.Mf = [1180260,  ?????, 0.041742];
        %tideComponents.Mm = [2380716,  ?????, 0.022026];
        %tideComponents.Ssa = [15778980, ????, 0.019446];
        % Extract the values for each tidal component into Mobj.period_obc,
        % Mobj.beta_love and Mobj.equilibrium_amp.
        for c=1:size(Mobj.Components,2)
            Mobj.period_obc(c) = tideComponents.(Mobj.Components{c})(1);
            Mobj.beta_love(c) = tideComponents.(Mobj.Components{c})(2);
            Mobj.equilibrium_amp(c) = tideComponents.(Mobj.Components{c})(3);
        end
        clear c
        % Provide amplitude and phase data for the boundary nodes. Use the TMD
        % function tmd_extract_HC.m to get harmonic constants at the boundary
        % nodes.
        amp=cell(1,Mobj.nObs);
        Gph=cell(1,Mobj.nObs);
        Depth=cell(1,Mobj.nObs);
        constList=cell(1,Mobj.nObs);
        for i=1:length(inputConf.boundaryNames)
            % It is possible to specify the indices of the constituents of interest
            % when calling tmd_extract_HC, but it requires knowing the order
            % they're stored in the file. Easier for me to extract the constituents
            % of interest separately. This makes it a bit slower (having to
            % interpolate all the constituents is slower than a select few), but
            % it's a bit easier to code up.
            if Mobj.have_lonlat
            [amp{i},Gph{i},Depth{i},constList{i}] = tmd_extract_HC(inputConf.Model,Mobj.lat(Mobj.read_obc_nodes{i}),Mobj.lon(Mobj.read_obc_nodes{i}),inputConf.extractType);
            else
                % Need to convert XY to latlon.
                try % to use the handy file exchange utm2deg function
                    % Make cell array of all the zones because utm2deg is a bit
                    % inflexible in that regard (size of utmZones must equal size
                    % of x and y).
                    % This is somewhat redundant now that the lat/long is added
                    % when generating the Coriolis values, but it's still
                    % worthwhile keeping it here just in case. No harm should
                    % come of it being here anyway.
                    utmZones=cellfun(@(x) repmat(x,length(Mobj.x(Mobj.read_obc_nodes{i})),1),inputConf.utmZone,'uni',false);
                    [tmpLat,tmpLon] = utm2deg(Mobj.x(Mobj.read_obc_nodes{i}),Mobj.y(Mobj.read_obc_nodes{i}),utmZones{1});
                    % Get the tidal data
                    [amp{i},Gph{i},Depth{i},constList{i}] = tmd_extract_HC(inputConf.Model,tmpLat,tmpLon,inputConf.extractType);
                catch %#ok<CTCH>
                    error('Can''t convert X/Y positions to lat/long, so can''t extract data from the TPXO data. Consider adding utm2deg to your PATH.')
                end
            end
            for j=1:numel(Mobj.Components)
                fprintf('Extracting %s... ',Mobj.Components{j});
                posIdx = strmatch(lower(Mobj.Components{j}),constList{i}); %#ok<MATCH2>
                Mobj.amp_obc{i}(j,:) = amp{i}(posIdx,:);
                Mobj.phase_obc{i}(j,:) = Gph{i}(posIdx,:); % Greenwich phase
                fprintf('done!\n');
            end
        end
        clear posIdx amp Gph Depth constList
        % Find NaNs in the boundaries
        for i=1:Mobj.nObs
            brokenBoundary=i;
            nanIdx = Mobj.read_obc_nodes{brokenBoundary}(isnan(Mobj.phase_obc{brokenBoundary}(1,:)));
            nanLon = Mobj.lon(nanIdx);
            nanLat = Mobj.lat(nanIdx);
            inputConf.doFig=0;
            if max(nanLon)-min(nanLon)==0
                minPos = min(nanLat);
                maxPos = max(nanLat);
                inputConf.doFig=1;
            elseif max(nanLat)-min(nanLat)==0
                minPos = min(nanLon);
                maxPos = max(nanLon);
                inputConf.doFig=1;
            elseif isempty(nanIdx)
                fprintf('No NaNs in %s boundary.\n',inputConf.boundaryNames{i});
                clear nanLon nanLat nanIdx
            else
                error('Boundaries are not linear. Won''t plot %s boundary NaNs',inputConf.boundaryNames{i});
            end
            if inputConf.doFig
                figure
                patch('Vertices',[Mobj.lon,Mobj.lat],'Faces',Mobj.tri,...
                    'Cdata',Mobj.h,'edgecolor','k','facecolor','interp');
                hold on;
                plot(Mobj.lon(nanIdx),Mobj.lat(nanIdx),'wo','LineWidth',3,'MarkerSize',12);
                plot(Mobj.lon(nanIdx),Mobj.lat(nanIdx),'ko','LineWidth',3,'MarkerSize',8);
                axis('equal','tight');
            end
        end
        save([inputConf.outbase,'varb/Mobj_01.mat'],'Mobj','-v7.3','-nocompression');
    end
end
Position 1 of 38 (140.376 35.119)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 2 of 38 (140.372 35.106)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 3 of 38 (140.368 35.093)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 4 of 38 (140.357 35.067)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 5 of 38 (140.348 35.049)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 6 of 38 (140.337 35.028)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 7 of 38 (140.320 35.002)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 8 of 38 (140.293 34.967)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 9 of 38 (140.241 34.913)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 10 of 38 (140.181 34.867)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 11 of 38 (140.123 34.831)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 12 of 38 (140.070 34.806)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 13 of 38 (140.021 34.787)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 14 of 38 (139.975 34.773)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 15 of 38 (139.923 34.761)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 16 of 38 (139.867 34.752)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 17 of 38 (139.807 34.747)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 18 of 38 (139.759 34.746)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 19 of 38 (139.711 34.748)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 20 of 38 (139.654 34.754)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 21 of 38 (139.602 34.763)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 22 of 38 (139.523 34.784)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 23 of 38 (139.485 34.798)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 24 of 38 (139.438 34.818)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 25 of 38 (139.404 34.835)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 26 of 38 (139.383 34.847)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 27 of 38 (139.332 34.882)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 28 of 38 (139.294 34.913)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 29 of 38 (139.251 34.955)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 30 of 38 (139.231 34.980)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 31 of 38 (139.218 34.997)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 32 of 38 (139.206 35.015)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 33 of 38 (139.198 35.033)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 34 of 38 (139.189 35.045)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 35 of 38 (139.182 35.058)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 36 of 38 (139.174 35.076)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 37 of 38 (139.164 35.102)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
Position 38 of 38 (139.157 35.123)... 
MODE: Time series
Reading /Users/yulong/GitHub/TMD/DATA/hf.OhS2010.out and extracting HC...
Interpolating constituent m2  ... done
Interpolating constituent s2  ... done
Interpolating constituent n2  ... done
Interpolating constituent k2  ... done
Interpolating constituent k1  ... done
Interpolating constituent o1  ... done
Interpolating constituent p1  ... done
Interpolating constituent q1  ... done
Done extracting HC
Predicting tide ...
done
clear tpxo_dir;

if strcmpi(inputConf.obcForcing, 'z')
    % Write out the TPXO predicted surface elevation.
    write_FVCOM_elevtide(Mobj, ...
        inputConf.tidesMJD,...
        fullfile(inputConf.outbase, [inputConf.casename, '_julian_obc.nc']),...
        'Model surface elevation boundary input',...
        'floattime', true,...
        'julian', true);
elseif strcmpi(inputConf.obcForcing, 'otps')
    % Write out the TPXO predicted surface elevation.
    write_FVCOM_elevtide(Mobj, ...
        inputConf.tidesMJD,...
        fullfile(inputConf.outbase, [inputConf.casename, '_julian_obc.nc']),...
        'Model surface elevation boundary input',...
        'floattime', true,...
        'julian', true);
elseif strcmpi(inputConf.obcForcing,'phase-amp')  
    % Write out the TPXO predicted spectral tide.
    set_spectide(Mobj,...
        numel(Mobj.Components),...
        fullfile(inputConf.outbase,[inputConf.casename,'_non_julian_obc.nc']),...
        'TPXO spectral tidal boundary input');
end
fprintf('Tidal forcing working time: %.2f minutes\n', toc / 60);
Tidal forcing working time: 1.74 minutes

%%
%%%------------------------------------------------------------------------
%%%                    HYCOM S&T forcing and staff
%%%------------------------------------------------------------------------
tic
% Now we need some boundary temperature and salinity conditions.
if strcmpi('HYCOM', {inputConf.obc_temp, inputConf.obc_salt})
    % Use HYCOM data for the boundary forcing.
    % Offset the times to give us a bit of wiggle room.
    if develop_mode == 3
    	fprintf('Loading Model objet file...\n')
        load([inputConf.outbase,'varb/Mobj_02.mat']);
        fprintf('Done!\n');
    else
    	if develop_mode == 1
            % modelTime = inputConf.obctsMJD;varlist={'temperature', 'salinity'}
    		fprintf('Downloading daliy open boundary S&T forcing from HYCOM...\n');
            % T
            for i = 1:10
                try
                    hycom_t = get_HYCOM_forcing(Mobj, inputConf.obctsMJD, {'temperature'}); 
                    break;  % Break out of the i-loop on success
                catch ME
                    disp(ME);
                    fprintf('Retrying...\n');
                end
            end
            save(['hycom_t','_',num2str(inputConf.startDate(1)),'_',num2str(inputConf.endDate(1)),'.mat'],...
                'hycom_t','-v7.3','-nocompression');
            % S
            for i = 1:10
                try
                    hycom_s = get_HYCOM_forcing(Mobj, inputConf.obctsMJD, {'salinity'}); 
                    break;  % Break out of the i-loop on success
                catch ME
                    disp(ME);
                    fprintf('Retrying...\n');
                end
            end
            save(['hycom_s','_',num2str(inputConf.startDate(1)),'_',num2str(inputConf.endDate(1)),'.mat'],...
                'hycom_s','-v7.3','-nocompression');
            fprintf('Downloading daliy open boundary meanflow from HYCOM...\n');
            if strcmpi('HYCOM', {inputConf.obc_u, inputConf.obc_v})
                fprintf('Writing daliy open boundary meanflow file.\n')
                % u
                for i = 1:10
                    try
                        hycom_u = get_HYCOM_forcing(Mobj, inputConf.obctsMJD, {'u'}); 
                        break;  % Break out of the i-loop on success
                    catch ME
                        disp(ME);
                        fprintf('Retrying...\n');
                    end
                end
                save(['hycom_u','_',num2str(inputConf.startDate(1)),'_',num2str(inputConf.endDate(1)),'.mat'],...
                    'hycom_u','-v7.3','-nocompression');
                % v
                for i = 1:10
                    try
                        hycom_v = get_HYCOM_forcing(Mobj, inputConf.obctsMJD, {'v'}); 
                        break;  % Break out of the i-loop on success
                    catch ME
                        disp(ME);
                        fprintf('Retrying...\n');
                    end
                end
                save(['hycom_v','_',num2str(inputConf.startDate(1)),'_',num2str(inputConf.endDate(1)),'.mat'],...
                    'hycom_v','-v7.3','-nocompression');
            end
            fprintf('Downloading daliy open boundary S&T forcing from HYCOM...Done!\n');
        elseif develop_mode == 2
    		fprintf('Loading daliy open boundary S&T forcing from local HYCOM database...\n')
        	load(['hycom_t','_',num2str(inputConf.startDate(1)),'_',num2str(inputConf.endDate(1)),'.mat']);
        	load(['hycom_s','_',num2str(inputConf.startDate(1)),'_',num2str(inputConf.endDate(1)),'.mat']);
            fprintf('Downloading daliy open boundary S&T forcing from HYCOM...Done!\n');
            if strcmpi('HYCOM', {inputConf.obc_u, inputConf.obc_v})
                load(['hycom_u','_',num2str(inputConf.startDate(1)),'_',num2str(inputConf.endDate(1)),'.mat']);
                load(['hycom_v','_',num2str(inputConf.startDate(1)),'_',num2str(inputConf.endDate(1)),'.mat']);
            end
    	end
    	% Interpolate the 4D HYCOM data on the FVCOM vertical grid at the open boundaries.
    	Mobj = get_HYCOM_tsobc(Mobj, hycom_t, {'temperature'});
    	Mobj = get_HYCOM_tsobc(Mobj, hycom_s, {'salinity'});
        if strcmpi('HYCOM', {inputConf.obc_u, inputConf.obc_v})
            % finding nesting region shows a nand of elements,
            % that is not we wanted, we need obc faces, instead.
            % Nested = find_nesting_region(inputConf, Mobj);
            % Mobj.read_obc_elems = Nested.read_obc_elems;
            Mobj = find_boundary_elements(Mobj);
            Mobj = get_HYCOM_tsobc(Mobj, hycom_u, {'u'});
            Mobj = get_HYCOM_tsobc(Mobj, hycom_v, {'v'});
        end
        clear hycom_*
        % backup daliy data
        Mobj.backup_temp = Mobj.temperature; 
        Mobj.backup_salt = Mobj.salt;
        Mobj.backup_tstm = Mobj.ts_times;
        if strcmpi('HYCOM', {inputConf.obc_u, inputConf.obc_v})
            Mobj.backup_mflu = Mobj.u;
            Mobj.backup_mflv = Mobj.v;
            Mobj.backup_mftm = Mobj.mf_times;
        end
        % recover daliy data
        %{
        Mobj.temperature = Mobj.backup_temp; Mobj.salt = Mobj.backup_salt;
        Mobj.u = Mobj.backup_mflu;           Mobj.v = Mobj.backup_mflv;
        Mobj.ts_times = Mobj.backup_tstm;    Mobj.mf_times = Mobj.backup_mftm;
        %}
        % Interpolate the 4D HYCOM data on the hourly time series
        Mobj = get_HYCOM_series(Mobj, inputConf.dateobs, 'temperature',true);
        Mobj = get_HYCOM_series(Mobj, inputConf.dateobs, 'salinity',true);
        if strcmpi('HYCOM', {inputConf.obc_u, inputConf.obc_v})
            Mobj = get_HYCOM_series(Mobj, inputConf.dateobs, 'u',true);
            Mobj = get_HYCOM_series(Mobj, inputCon